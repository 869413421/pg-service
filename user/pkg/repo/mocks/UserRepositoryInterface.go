// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	pagination "github.com/869413421/pg-service/common/pkg/pagination"
	model "github.com/869413421/pg-service/user/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// UserRepositoryInterface is an autogenerated mock type for the UserRepositoryInterface type
type UserRepositoryInterface struct {
	mock.Mock
}

// GetByEmail provides a mock function with given fields: email
func (_m *UserRepositoryInterface) GetByEmail(email string) (*model.User, error) {
	ret := _m.Called(email)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *UserRepositoryInterface) GetByID(id uint64) (*model.User, error) {
	ret := _m.Called(id)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(uint64) *model.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByPhone provides a mock function with given fields: phone
func (_m *UserRepositoryInterface) GetByPhone(phone string) (*model.User, error) {
	ret := _m.Called(phone)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(phone)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(phone)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFirst provides a mock function with given fields: where
func (_m *UserRepositoryInterface) GetFirst(where map[string]interface{}) (*model.User, error) {
	ret := _m.Called(where)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(map[string]interface{}) *model.User); ok {
		r0 = rf(where)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(where)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Pagination provides a mock function with given fields: page, perPage
func (_m *UserRepositoryInterface) Pagination(page uint64, perPage uint32) ([]model.User, pagination.ViewData, error) {
	ret := _m.Called(page, perPage)

	var r0 []model.User
	if rf, ok := ret.Get(0).(func(uint64, uint32) []model.User); ok {
		r0 = rf(page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	var r1 pagination.ViewData
	if rf, ok := ret.Get(1).(func(uint64, uint32) pagination.ViewData); ok {
		r1 = rf(page, perPage)
	} else {
		r1 = ret.Get(1).(pagination.ViewData)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(uint64, uint32) error); ok {
		r2 = rf(page, perPage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
